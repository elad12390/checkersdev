{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/board/board.component.ts","./src/app/board/board.component.html","./src/app/board/square/square.component.ts","./src/app/board/square/square.component.html","./src/app/services/checkers.service.ts","./src/app/services/clienthttp.interceptor.ts","./src/assets/states.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component, OnInit} from '@angular/core';\r\nimport {CheckersService, IState, IVersion} from './services/checkers.service';\r\nimport {FormControl} from '@angular/forms';\r\nimport {filter, map, switchMap, tap, timeInterval} from 'rxjs/operators';\r\nimport {MatCheckboxChange} from '@angular/material/checkbox';\r\nimport {environment} from '../environments/environment';\r\nimport {EMPTY, interval, Observable, of} from 'rxjs';\r\nimport {groupBy, keysToLowerCase} from '../assets/states';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.sass']\r\n})\r\nexport class AppComponent implements OnInit{\r\n  private checked = true;\r\n  public version: IVersion;\r\n  statesByGroup: any;\r\n  public selectableGames: string[];\r\n  public selectedGame: any;\r\n  constructor(public server: CheckersService, private snackBar: MatSnackBar) {\r\n  }\r\n  title = 'checkers-client';\r\n  gameFormControl: FormControl = new FormControl('Game_Demo_1');\r\n  serverUrl: FormControl = new FormControl();\r\n  state: any;\r\n  playeridx = 1;\r\n\r\n  localServerFormControl: FormControl = new FormControl(true);\r\n  selectGame: FormControl = new FormControl(null);\r\n  logFile: FormControl = new FormControl('');\r\n  public stepNum = 0;\r\n\r\n  ngOnInit(): void {\r\n    this.refreshView();\r\n    this.localServerFormControl.valueChanges.pipe(\r\n      tap((val) => this.localServer(val))\r\n    ).subscribe();\r\n\r\n    this.serverUrl.valueChanges.pipe(\r\n      tap(() => this.localServer(this.checked))\r\n    ).subscribe();\r\n\r\n    this.selectGame.valueChanges.pipe(\r\n      tap((a) => this.selectedGame = a),\r\n      tap(a => this.refreshView())\r\n    ).subscribe();\r\n\r\n    this.logFile.valueChanges.pipe(\r\n      map(a => a.split('\\n')),\r\n      map(a => a.map(b => b.split(' | '))),\r\n      map(a => a.filter(b => b.length >= 6 && b.length <= 7)),\r\n      map(a => a.filter(b => b[2] === 'INFO')),\r\n      map(a => a.filter(b => b[4].includes('state:'))),\r\n      map(a => a.map(b => ({\r\n        time: new Date(b[0]),\r\n        state: keysToLowerCase(JSON.parse(b[4].split('state: ').join('')))\r\n      }))),\r\n      // map(arr => arr.filter((v, i, a) => a.findIndex(t => (t.state.version === v.state.version)) === i)),\r\n      map(arr => arr.map(b => {\r\n        const state = b.state;\r\n        b.time.setTime(b.time.getTime() + (2 * 60 * 60 * 1000));\r\n        state.timelogged = b.time;\r\n        return b.state;\r\n      })),\r\n      map(states => groupBy(states, 'id')),\r\n      tap(groupedStates => this.selectableGames = Object.keys(groupedStates)),\r\n      tap(groupedStates => Object.keys(groupedStates).forEach(key => groupedStates[key] = groupedStates[key].filter((x, xi) => !groupedStates[key].slice(xi + 1).some(y => y['version'] === x['version'])))),\r\n      tap(() => this.stepNum = 0),\r\n      tap(a => this.statesByGroup = a),\r\n      tap(() => this.refreshView()),\r\n      tap(a => console.log(a))\r\n    ).subscribe();\r\n  }\r\n\r\n  public connectToGame(): void {\r\n    this.server.connectToGame(this.gameFormControl.value, 'Player_Demo_' + this.playeridx)\r\n      .pipe(\r\n        switchMap(() => interval(1000).pipe(\r\n          switchMap(() => this.server.version()),\r\n          map((obj) => obj),\r\n          switchMap((versionObj: IVersion) => {\r\n            this.version = versionObj;\r\n            const version = versionObj.version;\r\n            if (CheckersService.currentVersion !== version ) {\r\n              CheckersService.currentVersion = version;\r\n              return this.refreshViewObservable();\r\n            } else {\r\n              return EMPTY;\r\n            }\r\n          })\r\n        ))\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public refreshViewObservable(): Observable<any> {\r\n    if (!this.statesByGroup || !this.selectedGame) {\r\n      return of([]);\r\n    }\r\n    return of(this.statesByGroup[this.selectedGame][this.stepNum]).pipe(\r\n      tap((res) => {\r\n        this.state = res;\r\n        const arr = [...new Array(14)].map(() => [...new Array(14)]);\r\n        this.state.board.squares.flat().map((item) => {\r\n          if (item.chip) {\r\n            const player = this.state.players.find(pl => !!(Object.values(pl.chips).find((chip) => chip['Id'] === item.chip.id)));\r\n            arr[14 - item.position.y][item.position.x - 1] = {\r\n              ...item,\r\n              playerId: player?.index\r\n            };\r\n          } else {\r\n            arr[14 - item.position.y][item.position.x - 1] = item;\r\n          }\r\n        });\r\n        this.state.board.squares = arr as [];\r\n      })\r\n    );\r\n    // return this.server.connectToGame(this.gameFormControl.value, 'Player_Demo_' + this.playeridx).pipe(\r\n    //   switchMap(() => this.server.state().pipe(\r\n    //     tap((res) => {\r\n    //       this.state = res;\r\n    //       const arr = [...new Array(14)].map(() => [...new Array(14)]);\r\n    //       this.state.board.squares.map((item) => {\r\n    //         if (item.chip) {\r\n    //           const player = this.state.players.find(pl => !!(Object.values(pl.chips).find((chip) => chip.id === item.chip.id)));\r\n    //           arr[14 - item.position.y][item.position.x - 1] = {\r\n    //             ...item,\r\n    //             playerId: player.index\r\n    //           };\r\n    //         } else {\r\n    //           arr[14 - item.position.y][item.position.x - 1] = item;\r\n    //         }\r\n    //       });\r\n    //       this.state.board.squares = arr as [];\r\n    //     })\r\n    //   ))\r\n    // );\r\n  }\r\n  public refreshView(): void {\r\n    this.refreshViewObservable().subscribe();\r\n  }\r\n\r\n  public nextPlayer(): void {\r\n    if (this.playeridx + 1 > 4) {\r\n      this.playeridx = 1;\r\n    } else {\r\n      this.playeridx++;\r\n    }\r\n\r\n    this.refreshView();\r\n  }\r\n\r\n  public playedMove(): void {\r\n    this.nextPlayer();\r\n  }\r\n\r\n  public localServer(val: boolean): void {\r\n    this.checked = val;\r\n    this.server.serverUrl = this.checked ? environment.serverUrl : this.serverUrl.value;\r\n  }\r\n\r\n  nextMove(rev): void {\r\n    const selectedState = this.statesByGroup[this.selectedGame];\r\n    console.log(selectedState)\r\n    if ((!rev && (this.stepNum + 1 >= selectedState.length)) || (rev && (this.stepNum - 1 < 0))) {\r\n      if ((!rev && (this.stepNum + 1 >= selectedState.length))) {\r\n        this.snackBar.open('Reached end', '', {duration: 1000});\r\n      } else {\r\n        this.snackBar.open('Reached start', '', {duration: 1000});\r\n      }\r\n      return;\r\n    }\r\n    this.stepNum += rev ? -1 : 1;\r\n    this.refreshView();\r\n  }\r\n\r\n  public getCurrentPlayer(state): any {\r\n    return state?.players.find(a => Number(a.index) === Number(state.currentplayerindex));\r\n  }\r\n\r\n  convertToDate(timeA: any): Date {\r\n    return new Date(timeA);\r\n  }\r\n\r\n}\r\n","<div style=\"display: 'flex'; flex-direction: column;\">\r\n<!--  <mat-form-field class=\"example-full-width\">-->\r\n<!--    <mat-label>Game</mat-label>-->\r\n<!--    <input matInput [formControl]=\"gameFormControl\" placeholder=\"Game_Demo_#\">-->\r\n<!--  </mat-form-field>-->\r\n\r\n<!--  <mat-form-field class=\"example-full-width\">-->\r\n<!--    <mat-label>ServerUrl</mat-label>-->\r\n<!--    <input matInput [formControl]=\"serverUrl\" placeholder=\"www.xxx...\">-->\r\n<!--  </mat-form-field>-->\r\n<!--  <mat-checkbox [formControl]=\"localServerFormControl\">Local Server</mat-checkbox>-->\r\n  <mat-form-field>\r\n    <textarea placeholder=\"insert log here and scroll down\" style=\"height:500px\" type=\"text\" matInput [formControl]=\"logFile\"></textarea>\r\n  </mat-form-field>\r\n  <ng-container>\r\n    <mat-form-field>\r\n      <mat-select [formControl]=\"selectGame\">\r\n        <ng-container *ngFor=\"let gameId of selectableGames\">\r\n          <mat-option [value]=\"gameId\">{{gameId}}</mat-option>\r\n        </ng-container>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </ng-container>\r\n<ng-container *ngIf=\"!!state\">\r\n  <div>Client player: {{state?.currentPlayer?.nickname}}</div>\r\n  <div>Time {{version?.turnClock}}</div>\r\n  <div>Player index: {{server.playerIndex}}</div>\r\n  <div>Current index: {{state?.currentplayerindex}}</div>\r\n<!--  <div>{{lastchanges[stepNum] | json}}</div>-->\r\n  <button mat-raised-button (click)=\"nextMove(false)\">{{state.version}} Next Step</button>\r\n  <button mat-raised-button (click)=\"nextMove(true)\">{{state.version}} Prev Step</button>\r\n  <app-board *ngIf=\"state\" [board]=\"state.board?.squares\" (refresh)=\"playedMove()\" [currentPlayerIndex]=\"state.currentPlayerIndex\" [playerIndex]=\"playeridx\"></app-board>\r\n  <div class=\"game-details\">\r\n    <h2>Last state change:</h2>\r\n    <div>Playerid: {{state.laststatechange?.playerid | json}}</div>\r\n    <div>chip: <pre>{{state.laststatechange?.chipmoved?.chip | json}}</pre></div>\r\n    <div>Old Position: [x: {{state.laststatechange.chipmoved?.oldposition?.x}} , y: {{state.laststatechange.chipmoved?.oldposition?.y}}]</div>\r\n    <div>New Position: [x: {{state.laststatechange.chipmoved?.newposition?.x}} , y: {{state.laststatechange.chipmoved?.newposition?.y}}]</div>\r\n    <div>\r\n      <h3>Last Move:</h3>\r\n      <div class=\"last-move-list\">\r\n        <div *ngIf=\"(state.laststatechange.chipmoved?.lastmove?.length > 1) then moreThanOneMove; else oneMove\"></div>\r\n        <h4>Removed chips:</h4>\r\n        <pre>{{state.laststatechange?.removedchips | json}}</pre>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</ng-container>\r\n</div>\r\n\r\n<ng-template #moreThanOneMove>\r\n  <div *ngFor=\"let move of state.laststatechange.chipmoved?.lastmove;let i = index\">\r\n    <div> position number {{i + 1}}: [x: {{move.x}} , y: {{move.y}}]</div>\r\n  </div>\r\n</ng-template>\r\n<ng-template #oneMove>\r\n    <div> position: [x: {{state.laststatechange.chipmoved?.lastmove[0]?.x}} , y: {{state.laststatechange.chipmoved?.lastmove[0]?.y}}]</div>\r\n</ng-template>\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {ClientHttpInterceptor} from './services/clienthttp.interceptor';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatFormFieldControl, MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport { BoardComponent } from './board/board.component';\nimport { SquareComponent } from './board/square/square.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatSelectModule} from '@angular/material/select';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BoardComponent,\n    SquareComponent\n  ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatSnackBarModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        MatButtonModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        MatSelectModule\n    ],\n  providers: [\n    HttpClientModule,\n    { provide: HTTP_INTERCEPTORS, useClass: ClientHttpInterceptor, multi: true}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ISelectedChipEvent} from './square/square.component';\nimport {CheckersService, Isquare} from '../services/checkers.service';\nimport {$e} from 'codelyzer/angular/styles/chars';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nexport enum GAME_STATE {\n  IDLE,\n  MOVE\n}\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.sass']\n})\nexport class BoardComponent implements OnInit {\n  @Input() board: Isquare[];\n  @Input() currentPlayerIndex: number;\n  @Input() playerIndex: number;\n  @Output() refresh: EventEmitter<boolean> = new EventEmitter<boolean>();\n  state: GAME_STATE = GAME_STATE.IDLE;\n  selectedChip: number;\n  constructor(private service: CheckersService, private snackbar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  public selected($event: ISelectedChipEvent): void {\n    const x = $event.x - 1;\n    const y = $event.y - 1;\n    const sq = this.board[x][y];\n    switch (this.state) {\n      case GAME_STATE.IDLE:\n        if (!!sq) {\n          this.selectedChip = $event.id;\n          this.state = GAME_STATE.MOVE;\n        }\n        break;\n      case GAME_STATE.MOVE:\n        this.service.move({\n          chipId: this.selectedChip,\n          nextPositions: [{ x: x + 1, y: y + 1 }]\n        }).subscribe((res) => {\n          if (!res) {this.snackbar.open('Invalid move', '', {verticalPosition: 'top', horizontalPosition: 'center', duration: 3000}); }\n          this.refresh.emit(true);\n        });\n        this.state = GAME_STATE.IDLE;\n        break;\n    }\n  }\n}\n","<div class=\"board\">\r\n  <div *ngFor=\"let col of board; let y = index\" style=\"margin: 0; height: 1rem;\">\r\n      <app-square\r\n        [ngClass]=\"{'last-row': (14-y) == 1}\"\r\n        (selected)=\"selected($event)\"\r\n        *ngFor=\"let square of col; let x = index\"\r\n        [square]=\"square\"\r\n        [X]=\"x\"\r\n        [Y]=\"y\"\r\n        [attr.column-number]=\"x+1\"\r\n        [attr.row-number]=\"x == 0 ? 14 - y : ''\"></app-square>\r\n  </div>\r\n</div>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Isquare} from '../../services/checkers.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {keysToLowerCase} from '../../../assets/states';\n\nexport interface ISelectedChipEvent {\n  hasChip: boolean;\n  id: number;\n  isSelected: boolean;\n  x: number;\n  y: number;\n}\n\n@Component({\n  selector: 'app-square',\n  templateUrl: './square.component.html',\n  styleUrls: ['./square.component.sass']\n})\nexport class SquareComponent implements OnInit {\n\n  @Input() Y: number;\n  @Input() X: number;\n  @Input() playerIdx: number;\n  @Input() square: Isquare;\n  @Output() selected: EventEmitter<ISelectedChipEvent> = new EventEmitter<ISelectedChipEvent>();\n  isWhite: boolean;\n  isBlack: boolean;\n  hasChip: boolean;\n  clicked: boolean;\n  isFirstPlayer: boolean;\n  isSecondPlayer: boolean;\n  isThirdPlayer: boolean;\n  isFourthPlayer: boolean;\n  constructor(private snackbar: MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.isWhite = !this.square['isvalid'];\n    this.isBlack = this.square['isvalid'];\n    this.hasChip = !!this.square.chip;\n    this.isFirstPlayer = this.square.playerId === 0;\n    this.isSecondPlayer = this.square.playerId === 1;\n    this.isThirdPlayer = this.square.playerId === 2;\n    this.isFourthPlayer = this.square.playerId === 3;\n  }\n\n  public click(): void {\n    this.clicked = !this.clicked;\n    this.selected.emit({\n      hasChip: this.hasChip,\n      id: this.hasChip ? this.square.chip.id : null,\n      isSelected: this.clicked,\n      x: this.square.position.x,\n      y: this.square.position.y\n    });\n  }\n\n}\n","<div class=\"square\"\n     matTooltip=\"id:{{square.chip?.id}}, x:{{square.position.x}}, y:{{square.position.y}}\"\n     (click)=\"click()\"\n     [ngClass]=\"{\n       'black': isBlack,\n       'white': isWhite,\n       'chip': hasChip,\n       'clicked': clicked,\n       'isFirstPlayer': isFirstPlayer,\n       'isSecondPlayer': isSecondPlayer,\n       'isThirdPlayer': isThirdPlayer,\n       'isFourthPlayer': isFourthPlayer\n     }\"></div>\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {from, Observable, of} from 'rxjs';\nimport {environment} from '../../environments/environment';\nimport {map, tap} from 'rxjs/operators';\nimport {ClientHttpInterceptor} from './clienthttp.interceptor';\nimport {Time} from '@angular/common';\n\nexport class AppResponse<T> {\n  data: T;\n  description: string;\n  exception: string;\n  isSuccessful: boolean;\n  statusCode: number;\n  statusMessage: string;\n}\n\nexport interface IAuthRes {\n  gameId: string;\n  playerId: string;\n  playerIndex: number;\n  accessToken: string;\n  accessTokenExpiration: Date;\n  refreshToken: string;\n  refreshTokenExpiration: Date;\n}\n\nexport interface IBoard {\n  squares: Isquare[];\n}\n\nexport interface IPosition {\n  x: number;\n  y: number;\n  boardX: number;\n  boardY: number;\n}\n\nexport interface IShortPosition {\n  x: number;\n  y: number;\n}\n\nexport interface Isquare {\n  isValid: boolean;\n  isEmpty: boolean;\n  position: IPosition;\n  chip: IChip;\n  playerId: number;\n}\n\nexport interface IChip {\n  id: number;\n  type: number;\n  value: number;\n  isCaptured: boolean;\n  isBounty: boolean;\n  square: Isquare;\n  player: IPlayer;\n}\n\nexport interface IPlayer {\n  id: string;\n  index: number;\n  location: number;\n  chips: IChip[];\n  capturedChips: IChip[];\n  turnCount: number;\n  score: number;\n}\n\nexport interface IState {\n  id: string;\n  version: number;\n  board: IBoard;\n  players: IPlayer[];\n  currentPlayerIndex: number;\n  turnCount: number;\n  turnClock: Time;\n  gameClock: Time;\n  moneyPot: number;\n}\n\nexport interface IVersion {\n  version: number;\n  turnClock: Time;\n  gameClock: Time;\n}\n\nexport interface IMoveRequest {\n  chipId: number;\n  nextPositions: IShortPosition[];\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckersService {\n  public static currentVersion = 0;\n  public connectionHeaders: {\n    authorization: string;\n    refreshToken: string;\n  };\n  public playerIndex: number;\n  serverUrl: string = environment.serverUrl;\n  constructor(private httpClient: HttpClient) { }\n  public connectToGame(gameId: string, playerId: string): Observable<IAuthRes> {\n    return this.post<IAuthRes>('Game/Connect', {gameId, playerId}).pipe(\n      tap((res) => {\n        this.playerIndex = res.playerIndex;\n        this.connectionHeaders = {\n          refreshToken: res.refreshToken,\n          authorization: 'Bearer ' + res.accessToken\n        };\n      })\n    );\n  }\n\n  public move(move: IMoveRequest): Observable<IState> {\n    return this.post<IState>('Game/Move', move);\n  }\n\n  public version(): Observable<IVersion> {\n    return this.get<IVersion>('Game/Version');\n  }\n\n  public state(stepNum): Observable<any> {\n    return of([])//states[stepNum])// this.get<IState>('Game/State');\n  }\n\n  public post<T>(url: string, body: any | null, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<T> {\n    return this.httpClient.post<AppResponse<T>>(url, body, options).pipe(map(res => res.data));\n  }\n\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<T> {\n    return this.httpClient.get<AppResponse<T>>(url, options).pipe(map(res => res.data));\n  }\n\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<T> {\n    return this.httpClient.delete<AppResponse<T>>(url, options).pipe(map(res => res.data));\n  }\n\n  put<T>(url: string, body: any | null, options?: {\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType?: 'json';\n    withCredentials?: boolean;\n  }): Observable<T> {\n    return this.httpClient.put<AppResponse<T>>(url, body, options).pipe(map(res => res.data));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport {EMPTY, Observable} from 'rxjs';\nimport {CheckersService} from './checkers.service';\nimport {catchError} from 'rxjs/operators';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n@Injectable()\nexport class ClientHttpInterceptor implements HttpInterceptor {\n  constructor(private checkers: CheckersService, private snackbar: MatSnackBar) {}\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let headers = request.headers;\n    if (this.checkers.connectionHeaders) {\n      for (const [key, val] of Object.entries(this.checkers.connectionHeaders)) {\n        headers = headers.append(key, val);\n      }\n    }\n    const req = request.clone({ url: this.checkers.serverUrl + '/' + request.url, headers });\n    return next.handle(req).pipe(\n      catchError((err: HttpErrorResponse) => {\n        this.snackbar.open(err.message, '', {duration: 1000, horizontalPosition: 'center', verticalPosition: 'top'});\n        return EMPTY;\n      })\n    );\n  }\n}\n","export const keysToLowerCase = (obj) => {\r\n  if (!obj) { return obj; }\r\n  if (obj instanceof Array) {\r\n    // tslint:disable-next-line:forin\r\n    for (let i in obj) {\r\n      obj[i] = keysToLowerCase(obj[i]);\r\n    }\r\n  }\r\n  if ((typeof(obj) === 'string' || typeof(obj) === 'number' || typeof(obj) === 'boolean')) {\r\n    return obj;\r\n  }\r\n  let keys = Object.keys(obj);\r\n  let n = keys.length;\r\n  let lowKey;\r\n  while (n--) {\r\n    let key = keys[n];\r\n    if (key === (lowKey = key.toLowerCase())) {\r\n      continue;\r\n    }\r\n    obj[lowKey] = keysToLowerCase(obj[key]);\r\n    delete obj[key];\r\n  }\r\n  return (obj);\r\n};\r\n\r\n\r\nexport const groupBy = (xs, key) => {\r\n  return Array.from(xs).reduce((rv, x) => {\r\n    (rv[x[key]] = rv[x[key]] || []).push(x);\r\n    return rv;\r\n  }, {});\r\n};\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  serverUrl: 'https://localhost:44303'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}